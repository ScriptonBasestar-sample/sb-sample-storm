apply plugin: 'application'
apply plugin: 'kotlin'
//apply plugin: 'com.google.protobuf'
apply plugin: "com.github.johnrengelman.shadow"
//mainClassName = 'sample.storm.topology.test.origin.word.WordTopologyKt'

//configurations {
//	compile.exclude module: 'org.springframework.batch' // compile configuration에서 특정 모듈 제외
////	all*.exclude group: 'org.springframework.batch', module: 'spring-batch-integration' // 모든 configuration에서 특정 모듈 제외
//}

shadowJar {
	zip64 true
}

dependencies {
	implementation project(':core')
	implementation project(':domain')

	testCompile "org.apache.storm:storm-core:${storm_version}"
	testCompile "org.apache.storm:storm-client:${storm_version}"
	testCompile "org.apache.storm:flux-core:${storm_version}"
	compileOnly "org.apache.storm:storm-core:${storm_version}"
	compileOnly "org.apache.storm:storm-client:${storm_version}"
	compileOnly "org.apache.storm:flux-core:${storm_version}"
//	compile "org.apache.storm:storm-core:${storm_version}"
//	compile "org.apache.storm:storm-client:${storm_version}"
//	compile "org.apache.storm:flux-core:${storm_version}"

	compile "org.apache.storm:storm-metrics:${storm_version}"
	compile 'io.dropwizard.metrics:metrics-json:4.0.2'
	compile 'io.dropwizard.metrics:metrics-core:4.0.2'
	compile 'io.dropwizard.metrics:metrics-jvm:4.0.2'


	compile "org.apache.storm:storm-kafka-client:${storm_version}"
	compile "org.apache.storm:storm-redis:${storm_version}"

	compile('org.apache.kafka:kafka-clients:2.3.0')
//	compile('org.apache.kafka:kafka_2.12:2.3.0')
	compile('org.apache.kafka:kafka_2.11:2.3.0')
	compile('org.apache.kafka:kafka-streams:2.3.0')
//	compile 'org.apache.spark:spark-streaming_2.10:1.6.0'

	compile 'org.atmosphere:atmosphere-runtime:2.5.3'
	compile 'org.java-websocket:Java-WebSocket:1.4.0'

	compile 'com.squareup.okhttp3:okhttp:3.14.1'

	implementation "com.google.guava:guava:$guava_version"
	testImplementation 'io.socket:socket.io-client:1.0.0'

	//protobuf
//	implementation 'com.google.protobuf:protobuf-java:3.0.0'
//	implementation 'io.grpc:grpc-stub:1.0.0-pre2'
//	implementation 'io.grpc:grpc-protobuf:1.0.0-pre2'
//	if (JavaVersion.current().isJava9Compatible()) {
//		// Workaround for @javax.annotation.Generated
//		// see: https://github.com/grpc/grpc-java/issues/3633
//		compile 'javax.annotation:javax.annotation-api:1.3.1'
//	}
	// Extra proto source files besides the ones residing under
	// "src/main".
//	protobuf files("lib/protos.tar.gz")
//	protobuf files("ext/")
//
//	// Extra proto source files for test besides the ones residing under
//	// "src/test".
//	testProtobuf files("lib/protos-test.tar.gz")
}

//sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'
//compileKotlin.dependsOn ':generateProto'

//sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'
//compileKotlin.dependsOn ':generateProto'
//protobuf {
//	protoc {
//		// The artifact spec for the Protobuf Compiler
//		artifact = 'com.google.protobuf:protoc:3.0.0'
//	}
//	plugins {
//		// Optional: an artifact spec for a protoc plugin, with "grpc" as
//		// the identifier, which can be referred to in the "plugins"
//		// container of the "generateProtoTasks" closure.
//		grpc {
//			artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
//		}
//	}
//	generateProtoTasks {
//		ofSourceSet('main')*.plugins {
//			// Apply the "grpc" plugin whose spec is defined above, without
//			// options.  Note the braces cannot be omitted, otherwise the
//			// plugin will not be added. This is because of the implicit way
//			// NamedDomainObjectContainer binds the methods.
//			grpc { }
//		}
//	}
//}
